// automatically generated by the FlatBuffers compiler, do not modify

namespace Model
{

using System;
using FlatBuffers;

public sealed class UserData : Table {
  public static UserData GetRootAsUserData(ByteBuffer _bb) { return GetRootAsUserData(_bb, new UserData()); }
  public static UserData GetRootAsUserData(ByteBuffer _bb, UserData obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public UserData __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int CoinNum { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }

  public static Offset<UserData> CreateUserData(FlatBufferBuilder builder,
      int coinNum = 0) {
    builder.StartObject(1);
    UserData.AddCoinNum(builder, coinNum);
    return UserData.EndUserData(builder);
  }

  public static void StartUserData(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddCoinNum(FlatBufferBuilder builder, int coinNum) { builder.AddInt(0, coinNum, 0); }
  public static Offset<UserData> EndUserData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<UserData>(o);
  }
  public static void FinishUserDataBuffer(FlatBufferBuilder builder, Offset<UserData> offset) { builder.Finish(offset.Value); }
};


}
